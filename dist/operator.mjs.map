{"version":3,"sources":["../src/utils/errors.ts","../ts/Maci.client.ts","../src/utils/config.ts","../src/utils/index.ts","../src/commands/stop_voting.ts","../src/commands/start_process.ts","../src/commands/process_message.ts","../src/commands/stop_processing.ts","../src/commands/process_tally.ts","../src/commands/stop_tallying.ts","../src/commands/index.ts","../src/operator.ts"],"sourcesContent":["import chalk from \"chalk\";\nimport { ZodError } from \"zod\";\nimport { fromZodError, ValidationError } from \"zod-validation-error\";\n\nexport class NotInsideProjectError extends Error {\n  name = \"NotInsideProjectError\";\n  message = \"You are not inside a vota project\";\n}\n\nexport class VotaOperatorCliError extends Error {\n  name = \"VotaOperatorCliError\";\n}\n\nexport function logError(error: unknown) {\n  if (error instanceof ValidationError) {\n    console.log(chalk.redBright(error.message));\n  } else if (error instanceof ZodError) {\n    const validationError = fromZodError(error, {\n      prefixSeparator: \"\\n- \",\n      issueSeparator: \"\\n- \",\n    });\n    console.log(chalk.redBright(validationError.message));\n  } else if (error instanceof NotInsideProjectError) {\n    console.log(chalk.red(error.message));\n    console.log(\"\");\n    // TODO add docs to the website and update the link to the specific page\n    console.log(chalk.blue(`To learn more about Vota's configuration, please go to https://github.com/dorafactory`));\n  } else if (error instanceof VotaOperatorCliError) {\n    console.log(chalk.red(error));\n  } else {\n    console.log(error);\n  }\n}\n","/**\n* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the @cosmwasm/ts-codegen generate command to regenerate this file.\n*/\n\nimport { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from \"@cosmjs/cosmwasm-stargate\";\nimport { Coin, StdFee } from \"@cosmjs/amino\";\nimport { Uint256, Timestamp, Uint64, InstantiateMsg, PubKey, MaciParameters, VKeyType, QuinaryTreeRoot, RoundInfo, VotingTime, Whitelist, WhitelistConfig, ExecuteMsg, Message, ProofType, QueryMsg, Addr, PeriodStatus, Period, Boolean } from \"./Maci.types\";\nexport interface MaciReadOnlyInterface {\n  contractAddress: string;\n  getRoundInfo: () => Promise<RoundInfo>;\n  getVotingTime: () => Promise<VotingTime>;\n  getPeriod: () => Promise<Period>;\n  getNumSignUp: () => Promise<Uint256>;\n  getMsgChainLength: () => Promise<Uint256>;\n  getResult: ({\n    index\n  }: {\n    index: Uint256;\n  }) => Promise<Uint256>;\n  getAllResult: () => Promise<Uint256>;\n  getStateIdxInc: ({\n    address\n  }: {\n    address: Addr;\n  }) => Promise<Uint256>;\n  getVoiceCreditBalance: ({\n    index\n  }: {\n    index: Uint256;\n  }) => Promise<Uint256>;\n  whiteList: () => Promise<Whitelist>;\n  isWhiteList: ({\n    sender\n  }: {\n    sender: string;\n  }) => Promise<Boolean>;\n  whiteBalanceOf: ({\n    sender\n  }: {\n    sender: string;\n  }) => Promise<Uint256>;\n}\nexport class MaciQueryClient implements MaciReadOnlyInterface {\n  client: CosmWasmClient;\n  contractAddress: string;\n\n  constructor(client: CosmWasmClient, contractAddress: string) {\n    this.client = client;\n    this.contractAddress = contractAddress;\n    this.getRoundInfo = this.getRoundInfo.bind(this);\n    this.getVotingTime = this.getVotingTime.bind(this);\n    this.getPeriod = this.getPeriod.bind(this);\n    this.getNumSignUp = this.getNumSignUp.bind(this);\n    this.getMsgChainLength = this.getMsgChainLength.bind(this);\n    this.getResult = this.getResult.bind(this);\n    this.getAllResult = this.getAllResult.bind(this);\n    this.getStateIdxInc = this.getStateIdxInc.bind(this);\n    this.getVoiceCreditBalance = this.getVoiceCreditBalance.bind(this);\n    this.whiteList = this.whiteList.bind(this);\n    this.isWhiteList = this.isWhiteList.bind(this);\n    this.whiteBalanceOf = this.whiteBalanceOf.bind(this);\n  }\n\n  getRoundInfo = async (): Promise<RoundInfo> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_round_info: {}\n    });\n  };\n  getVotingTime = async (): Promise<VotingTime> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_voting_time: {}\n    });\n  };\n  getPeriod = async (): Promise<Period> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_period: {}\n    });\n  };\n  getNumSignUp = async (): Promise<Uint256> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_num_sign_up: {}\n    });\n  };\n  getMsgChainLength = async (): Promise<Uint256> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_msg_chain_length: {}\n    });\n  };\n  getResult = async ({\n    index\n  }: {\n    index: Uint256;\n  }): Promise<Uint256> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_result: {\n        index\n      }\n    });\n  };\n  getAllResult = async (): Promise<Uint256> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_all_result: {}\n    });\n  };\n  getStateIdxInc = async ({\n    address\n  }: {\n    address: Addr;\n  }): Promise<Uint256> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_state_idx_inc: {\n        address\n      }\n    });\n  };\n  getVoiceCreditBalance = async ({\n    index\n  }: {\n    index: Uint256;\n  }): Promise<Uint256> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_voice_credit_balance: {\n        index\n      }\n    });\n  };\n  whiteList = async (): Promise<Whitelist> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      white_list: {}\n    });\n  };\n  isWhiteList = async ({\n    sender\n  }: {\n    sender: string;\n  }): Promise<Boolean> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      is_white_list: {\n        sender\n      }\n    });\n  };\n  whiteBalanceOf = async ({\n    sender\n  }: {\n    sender: string;\n  }): Promise<Uint256> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      white_balance_of: {\n        sender\n      }\n    });\n  };\n}\nexport interface MaciInterface extends MaciReadOnlyInterface {\n  contractAddress: string;\n  sender: string;\n  setParams: ({\n    intStateTreeDepth,\n    messageBatchSize,\n    stateTreeDepth,\n    voteOptionTreeDepth\n  }: {\n    intStateTreeDepth: Uint256;\n    messageBatchSize: Uint256;\n    stateTreeDepth: Uint256;\n    voteOptionTreeDepth: Uint256;\n  }, fee?: number | StdFee | \"auto\", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;\n  setRoundInfo: ({\n    roundInfo\n  }: {\n    roundInfo: RoundInfo;\n  }, fee?: number | StdFee | \"auto\", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;\n  setWhitelists: ({\n    whitelists\n  }: {\n    whitelists: Whitelist;\n  }, fee?: number | StdFee | \"auto\", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;\n  setVoteOptionsMap: ({\n    voteOptionMap\n  }: {\n    voteOptionMap: string[];\n  }, fee?: number | StdFee | \"auto\", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;\n  startVotingPeriod: (fee?: number | StdFee | \"auto\", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;\n  signUp: ({\n    pubkey\n  }: {\n    pubkey: PubKey;\n  }, fee?: number | StdFee | \"auto\", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;\n  startProcessPeriod: (fee?: number | StdFee | \"auto\", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;\n  stopVotingPeriod: (fee?: number | StdFee | \"auto\", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;\n  publishMessage: ({\n    encPubKey,\n    message\n  }: {\n    encPubKey: PubKey;\n    message: Message;\n  }, fee?: number | StdFee | \"auto\", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;\n  processMessage: ({\n    newStateCommitment,\n    proof\n  }: {\n    newStateCommitment: Uint256;\n    proof: ProofType;\n  }, fee?: number | StdFee | \"auto\", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;\n  stopProcessingPeriod: (fee?: number | StdFee | \"auto\", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;\n  processTally: ({\n    newTallyCommitment,\n    proof\n  }: {\n    newTallyCommitment: Uint256;\n    proof: ProofType;\n  }, fee?: number | StdFee | \"auto\", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;\n  stopTallyingPeriod: ({\n    results,\n    salt\n  }: {\n    results: Uint256[];\n    salt: Uint256;\n  }, fee?: number | StdFee | \"auto\", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;\n}\nexport class MaciClient extends MaciQueryClient implements MaciInterface {\n  client: SigningCosmWasmClient;\n  sender: string;\n  contractAddress: string;\n\n  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {\n    super(client, contractAddress);\n    this.client = client;\n    this.sender = sender;\n    this.contractAddress = contractAddress;\n    this.setParams = this.setParams.bind(this);\n    this.setRoundInfo = this.setRoundInfo.bind(this);\n    this.setWhitelists = this.setWhitelists.bind(this);\n    this.setVoteOptionsMap = this.setVoteOptionsMap.bind(this);\n    this.startVotingPeriod = this.startVotingPeriod.bind(this);\n    this.signUp = this.signUp.bind(this);\n    this.startProcessPeriod = this.startProcessPeriod.bind(this);\n    this.stopVotingPeriod = this.stopVotingPeriod.bind(this);\n    this.publishMessage = this.publishMessage.bind(this);\n    this.processMessage = this.processMessage.bind(this);\n    this.stopProcessingPeriod = this.stopProcessingPeriod.bind(this);\n    this.processTally = this.processTally.bind(this);\n    this.stopTallyingPeriod = this.stopTallyingPeriod.bind(this);\n  }\n\n  setParams = async ({\n    intStateTreeDepth,\n    messageBatchSize,\n    stateTreeDepth,\n    voteOptionTreeDepth\n  }: {\n    intStateTreeDepth: Uint256;\n    messageBatchSize: Uint256;\n    stateTreeDepth: Uint256;\n    voteOptionTreeDepth: Uint256;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      set_params: {\n        int_state_tree_depth: intStateTreeDepth,\n        message_batch_size: messageBatchSize,\n        state_tree_depth: stateTreeDepth,\n        vote_option_tree_depth: voteOptionTreeDepth\n      }\n    }, fee, memo, _funds);\n  };\n  setRoundInfo = async ({\n    roundInfo\n  }: {\n    roundInfo: RoundInfo;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      set_round_info: {\n        round_info: roundInfo\n      }\n    }, fee, memo, _funds);\n  };\n  setWhitelists = async ({\n    whitelists\n  }: {\n    whitelists: Whitelist;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      set_whitelists: {\n        whitelists\n      }\n    }, fee, memo, _funds);\n  };\n  setVoteOptionsMap = async ({\n    voteOptionMap\n  }: {\n    voteOptionMap: string[];\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      set_vote_options_map: {\n        vote_option_map: voteOptionMap\n      }\n    }, fee, memo, _funds);\n  };\n  startVotingPeriod = async (fee: number | StdFee | \"auto\" = \"auto\", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      start_voting_period: {}\n    }, fee, memo, _funds);\n  };\n  signUp = async ({\n    pubkey\n  }: {\n    pubkey: PubKey;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      sign_up: {\n        pubkey\n      }\n    }, fee, memo, _funds);\n  };\n  startProcessPeriod = async (fee: number | StdFee | \"auto\" = \"auto\", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      start_process_period: {}\n    }, fee, memo, _funds);\n  };\n  stopVotingPeriod = async (fee: number | StdFee | \"auto\" = \"auto\", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      stop_voting_period: {}\n    }, fee, memo, _funds);\n  };\n  publishMessage = async ({\n    encPubKey,\n    message\n  }: {\n    encPubKey: PubKey;\n    message: Message;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      publish_message: {\n        enc_pub_key: encPubKey,\n        message\n      }\n    }, fee, memo, _funds);\n  };\n  processMessage = async ({\n    newStateCommitment,\n    proof\n  }: {\n    newStateCommitment: Uint256;\n    proof: ProofType;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      process_message: {\n        new_state_commitment: newStateCommitment,\n        proof\n      }\n    }, fee, memo, _funds);\n  };\n  stopProcessingPeriod = async (fee: number | StdFee | \"auto\" = \"auto\", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      stop_processing_period: {}\n    }, fee, memo, _funds);\n  };\n  processTally = async ({\n    newTallyCommitment,\n    proof\n  }: {\n    newTallyCommitment: Uint256;\n    proof: ProofType;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      process_tally: {\n        new_tally_commitment: newTallyCommitment,\n        proof\n      }\n    }, fee, memo, _funds);\n  };\n  stopTallyingPeriod = async ({\n    results,\n    salt\n  }: {\n    results: Uint256[];\n    salt: Uint256;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      stop_tallying_period: {\n        results,\n        salt\n      }\n    }, fee, memo, _funds);\n  };\n}","import { Secp256k1HdWallet, SigningCosmosClient } from \"@cosmjs/launchpad\";\nimport {\n  DirectSecp256k1HdWallet,\n  OfflineDirectSigner,\n} from \"@cosmjs/proto-signing\";\nimport {\n  StargateClient,\n  SigningStargateClient,\n  IndexedTx,\n} from \"@cosmjs/stargate\";\nimport { MsgSend } from \"cosmjs-types/cosmos/bank/v1beta1/tx\";\nimport { Tx } from \"cosmjs-types/cosmos/tx/v1beta1/tx\";\nimport {\n  MaciClient,\n  MaciQueryClient,\n} from \"../../ts/Maci.client\";\nimport {\n  CosmWasmClient,\n  SigningCosmWasmClient,\n} from \"@cosmjs/cosmwasm-stargate\";\nimport * as fs from 'fs';\n\nexport const rpcEndpoint = \"https://vota-testnet-rpc.dorafactory.org\";\nexport const restEndpoint = \"https://vota-testnet-rest.dorafactory.org\";\nexport const chainId = \"doravota-devnet\";\nexport const prefix = \"dora\";\n\n\nexport const mnemonic = // dora1t58t7azqzq26406uwehgnfekal5kzym3m9lz4k\n  \"ride woman device foam siren cruel dove island expand fiber tail exit dynamic alien crouch fish crime story keep law joke sunny they sock\";\n  export const contractAddress = \"dora14dky5amkrl4nc0t47pcdth8fjh940mkyfcdup55medx5rj8gsxaqrst236\"\n\n\nexport async function getContractSignerClient() {\n    const wallet = await Secp256k1HdWallet.fromMnemonic(mnemonic, {\n        prefix,\n        });\n  const signingCosmWasmClient = await SigningCosmWasmClient.connectWithSigner(\n    rpcEndpoint,\n    wallet\n  );\n\n  const [{ address }] = await wallet.getAccounts();\n  return new MaciClient(\n    signingCosmWasmClient,\n    address, // \"dora1t58t7azqzq26406uwehgnfekal5kzym3m9lz4k\"\n    contractAddress\n  );\n}\n\nexport async function readAndParseJsonFile(filePath: string): Promise<any> {\n  try {\n    const fileContent = await fs.promises.readFile(filePath, 'utf-8');\n    const jsonData = JSON.parse(fileContent);\n    return jsonData;\n  } catch (error) {\n    throw error;\n  }\n}\n","export * from \"./errors\";\nexport * from \"./config\";","import { Secp256k1HdWallet, SigningCosmosClient } from \"@cosmjs/launchpad\";\nimport {\n  DirectSecp256k1HdWallet,\n  OfflineDirectSigner,\n} from \"@cosmjs/proto-signing\";\nimport {\n  StargateClient,\n  SigningStargateClient,\n  IndexedTx,\n} from \"@cosmjs/stargate\";\nimport { MsgSend } from \"cosmjs-types/cosmos/bank/v1beta1/tx\";\nimport { Tx } from \"cosmjs-types/cosmos/tx/v1beta1/tx\";\nimport {\n  MaciClient,\n  MaciQueryClient,\n} from \"../../ts/Maci.client\";\nimport {\n  CosmWasmClient,\n  SigningCosmWasmClient,\n} from \"@cosmjs/cosmwasm-stargate\";\n\nimport type { CommandModule } from \"yargs\";\nimport path from \"path\";\nimport {getContractSignerClient} from \"../utils\";\n\nconst commandModule: CommandModule = {\n  command: \"stop-voting\",\n\n  describe: \"Stop voting period\",\n\n  builder(yargs) {\n    return yargs;\n  },\n\n  async handler() {\n    console.log(`stop voting period`)\n    const maci = await getContractSignerClient();\n    const res = await maci.stopVotingPeriod( {\n        amount: [{ denom: \"uDORA\", amount: \"20\" }],\n        gas: \"200000\",\n    });\n    console.log(res)\n    process.exit(0);\n  },\n};\n\nexport default commandModule;\n","import type { CommandModule } from \"yargs\";\nimport path from \"path\";\nimport * as fs from 'fs';\nimport { Uint256, ProofType } from \"../../ts/Maci.types\";\nimport {getContractSignerClient, readAndParseJsonFile} from \"../utils\";\n\n\n\nconst commandModule: CommandModule = {\n  command: \"start-process\",\n\n  describe: \"start process period after voting end\",\n\n  builder(yargs) {\n    return yargs;\n  },\n\n  async handler() {\n    const maci = await getContractSignerClient();\n    const res = await maci.startProcessPeriod( {\n        amount: [{ denom: \"uDORA\", amount: \"20\" }],\n        gas: \"200000\",\n    });\n    console.log(res)\n    // let msg_proof = await readAndParseJsonFile(`${path}/build/final_proof/msg/proof_hex.json`);\n    // console.log(msg_proof)\n\n    // let tally_input = await readAndParseJsonFile(`${path}/build/inputs/tally-input_0000.json`);\n    // console.log(tally_input)\n    \n\n    // let tally_proof = await readAndParseJsonFile(`${path}/build/final_proof/tally/proof_hex.json`);\n    // console.log(tally_proof)\n\n    // let result = await readAndParseJsonFile(`${path}/build/inputs/result.json`);\n    // console.log(result)\n\n    process.exit(0);\n  },\n};\n\nexport default commandModule;\n","import type { CommandModule } from \"yargs\";\nimport path from \"path\";\nimport { Uint256, ProofType } from \"../../ts/Maci.types\";\nimport {getContractSignerClient, readAndParseJsonFile} from \"../utils\";\n\ntype Options = {\n  configPath?: string;\n};\n\nconst commandModule: CommandModule<Options, Options> = {\n  command: \"process-message\",\n\n  describe: \"After voting period, operator need process message\",\n\n  builder(yargs) {\n    return yargs.options();\n  },\n\n  async handler() {\n    console.log(`your config is`)\n\n    let commitments = await readAndParseJsonFile(`${path}/build/inputs/commitments.json`);\n    console.log(commitments['msg_0000'])\n    let newStateCommitment = commitments['msg_0000'];\n\n    let msg_input = await readAndParseJsonFile(`${path}/build/final_proof/msg/proof_hex.json`);\n    console.log(msg_input)\n    let proof: ProofType = {\n      a: msg_input['pi_a'],\n      b: msg_input['pi_b'],\n      c: msg_input['pi_c']\n    }\n\n    const maci = await getContractSignerClient();\n    const res = await maci.processMessage({        \n      newStateCommitment,\n      proof,\n    }, {\n      amount: [{ denom: \"uDORA\", amount: \"20\" }],\n      gas: \"200000\",\n    });\n    console.log(res)\n    process.exit(0);\n  },\n};\n\nexport default commandModule;\n","import type { CommandModule } from \"yargs\";\nimport path from \"path\";\nimport { Uint256, ProofType } from \"../../ts/Maci.types\";\nimport {getContractSignerClient, readAndParseJsonFile} from \"../utils\";\n\nconst commandModule: CommandModule = {\n  command: \"stop-processing\",\n\n  describe: \"Stop processing period\",\n\n  builder(yargs) {\n    return yargs;\n  },\n\n  async handler() {\n    console.log(`stop processing period`)\n    const maci = await getContractSignerClient();\n    const res = await maci.stopProcessingPeriod( {\n        amount: [{ denom: \"uDORA\", amount: \"20\" }],\n        gas: \"200000\",\n    });\n    console.log(res)\n    process.exit(0);\n  },\n};\n\nexport default commandModule;\n","import type { CommandModule } from \"yargs\";\nimport path from \"path\";\n\nimport { Uint256, ProofType } from \"../../ts/Maci.types\";\nimport {getContractSignerClient, readAndParseJsonFile} from \"../utils\";\n\n\nconst commandModule: CommandModule = {\n  command: \"process-tally\",\n\n  describe: \"After processing period, operator need process tally\",\n\n  builder(yargs) {\n    return yargs.options();\n  },\n\n  async handler() {\n    console.log(`your config is`)\n\n\n    let commitments = await readAndParseJsonFile(`${path}/build/inputs/commitments.json`);\n    console.log(commitments['tally_0000'])\n    let newStateCommitment = commitments['tally_0000'];\n\n    let msg_input = await readAndParseJsonFile(`${path}/build/final_proof/msg/proof_hex.json`);\n    console.log(msg_input)\n    let proof: ProofType = {\n      a: msg_input['pi_a'],\n      b: msg_input['pi_b'],\n      c: msg_input['pi_c']\n    }\n\n    const maci = await getContractSignerClient();\n    const res = await maci.processMessage({        \n      newStateCommitment,\n      proof,\n    }, {\n      amount: [{ denom: \"uDORA\", amount: \"20\" }],\n      gas: \"200000\",\n    });\n    console.log(res)\n    process.exit(0);\n  },\n};\n\nexport default commandModule;\n","import type { CommandModule } from \"yargs\";\nimport path from \"path\";\nimport { Uint256, ProofType,  } from \"../../ts/Maci.types\";\nimport {getContractSignerClient, readAndParseJsonFile} from \"../utils\";\n\nconst commandModule: CommandModule = {\n  command: \"stop-tallying\",\n\n  describe: \"Stop tallying period\",\n\n  builder(yargs) {\n    return yargs;\n  },\n\n  async handler() {\n    console.log(`stop tallying period`)\n    const maci = await getContractSignerClient();\n    let tally_final_input = await readAndParseJsonFile(`${path}/build/inputs/tally-input_0000.json`);\n    console.log(tally_final_input)\n    let results: Uint256[] = tally_final_input[\"currentResults\"]\n    let salt: Uint256 = tally_final_input[\"newResultsRootSalt\"]\n\n    const res = await maci.stopTallyingPeriod( {results, salt}, {\n        amount: [{ denom: \"uDORA\", amount: \"20\" }],\n        gas: \"200000\",\n    });\n    console.log(res)\n    process.exit(0);\n  },\n};\n\nexport default commandModule;\n","import { CommandModule } from \"yargs\";\n\nimport stop_voting from \"./stop_voting\";\nimport start_process from \"./start_process\";\nimport process_message from \"./process_message\";\nimport stop_processing from \"./stop_processing\";\nimport process_tally from \"./process_tally\";\nimport stop_tallying from \"./stop_tallying\";\n// import publish from \"./publish\";\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any -- Each command has different options\nexport const commands: CommandModule<any, any>[] = [\n  // publish,\n  stop_voting,\n  start_process,\n  process_message,\n  stop_processing,\n  process_tally,\n  stop_tallying\n  // processMessage,\n];\n","#!/usr/bin/env node\n\nimport yargs from \"yargs\";\nimport { hideBin } from \"yargs/helpers\";\nimport { commands } from \"./commands\";\nimport { logError } from \"./utils/errors\";\n\n// Load .env file into process.env\nimport * as dotenv from \"dotenv\";\nimport chalk from \"chalk\";\ndotenv.config();\n\nyargs(hideBin(process.argv))\n  // Explicit name to display in help (by default it's the entry file, which may not be \"operator\" for e.g. ts-node)\n  .scriptName(\"operator\")\n  // Use the commands directory to scaffold\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- command array overload isn't typed, see https://github.com/yargs/yargs/blob/main/docs/advanced.md#esm-hierarchy\n  .command(commands as any)\n  // Enable strict mode.\n  .strict()\n  // Custom error handler\n  .fail((msg, err) => {\n    console.error(chalk.red(msg));\n    if (msg.includes(\"Missing required argument\")) {\n      console.log(\n        chalk.yellow(`Run 'pnpm operator ${process.argv[2]} --help' for a list of available and required arguments.`)\n      );\n    }\n    console.log(\"\");\n    logError(err);\n    console.log(\"\");\n\n    process.exit(1);\n  })\n  // Useful aliases.\n  .alias({ h: \"help\" }).argv;\n"],"mappings":"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","names":["chalk","ZodError","fromZodError","ValidationError","logError","error","validationError","NotInsideProjectError","VotaOperatorCliError","init_errors","__esmMin","MaciQueryClient","MaciClient","init_Maci_client","__esmMin","client","contractAddress","index","address","sender","intStateTreeDepth","messageBatchSize","stateTreeDepth","voteOptionTreeDepth","fee","memo","_funds","roundInfo","whitelists","voteOptionMap","pubkey","encPubKey","message","newStateCommitment","proof","newTallyCommitment","results","salt","Secp256k1HdWallet","SigningCosmWasmClient","fs","getContractSignerClient","wallet","mnemonic","prefix","signingCosmWasmClient","rpcEndpoint","address","MaciClient","contractAddress","readAndParseJsonFile","filePath","fileContent","error","init_config","__esmMin","init_Maci_client","init_utils","__esmMin","init_errors","init_config","commandModule","stop_voting_default","init_stop_voting","__esmMin","init_utils","yargs","res","getContractSignerClient","commandModule","start_process_default","init_start_process","__esmMin","init_utils","yargs","res","getContractSignerClient","path","commandModule","process_message_default","init_process_message","__esmMin","init_utils","yargs","commitments","readAndParseJsonFile","newStateCommitment","msg_input","proof","res","getContractSignerClient","commandModule","stop_processing_default","init_stop_processing","__esmMin","init_utils","yargs","res","getContractSignerClient","path","commandModule","process_tally_default","init_process_tally","__esmMin","init_utils","yargs","commitments","readAndParseJsonFile","newStateCommitment","msg_input","proof","res","getContractSignerClient","path","commandModule","stop_tallying_default","init_stop_tallying","__esmMin","init_utils","yargs","maci","getContractSignerClient","tally_final_input","readAndParseJsonFile","results","salt","res","commands","init_commands","__esmMin","init_stop_voting","init_start_process","init_process_message","init_stop_processing","init_process_tally","init_stop_tallying","stop_voting_default","start_process_default","process_message_default","stop_processing_default","process_tally_default","stop_tallying_default","yargs","hideBin","dotenv","chalk","require_operator","__commonJSMin","init_commands","init_errors","commands","msg","err","logError"]}